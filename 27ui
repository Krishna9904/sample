import streamlit as st
import requests

st.set_page_config(layout="wide")

# Initialize session state for button toggles
if "show_session_form" not in st.session_state:
    st.session_state.show_session_form = False
if "show_project_form" not in st.session_state:
    st.session_state.show_project_form = False

def toggle_session_form():
    st.session_state.show_session_form = not st.session_state.show_session_form

def toggle_project_form():
    st.session_state.show_project_form = not st.session_state.show_project_form

# Custom Navbar
st.markdown(
    """
    <style>
        header {visibility: hidden;}
        .stDeployButton {visibility: hidden;}
        
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: white;
            padding: 15px 20px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            z-index: 9999;
        }
        .navbar img {
            height: 40px; /* Adjust logo size */
            margin-right: 10px;
        }
        .navbar h1 {
            font-size: 22px;
            font-weight: bold;
            margin: 0;
        }
        .stApp {
            margin-top: 70px; /* Push content down */
        }
    </style>

    <div class="navbar">
        <img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg" alt="Logo">
        <h1>My Workbench</h1>
    </div>
    """,
    unsafe_allow_html=True
)

col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("🖥️ Sessions")
    
    # Launch New Session Button
    if st.button("🚀 Launch New Session"):
        toggle_session_form()

    if st.session_state.show_session_form:
        gres = st.number_input("🎛️ GPUs", min_value=1, max_value=8, step=1)
        tres_per_job = st.number_input("🎛️ GPUs per Job", min_value=1, max_value=8, step=1)
        cpu_per_tres = st.number_input("💾 Memory (GB)", min_value=1, max_value=128, step=1)
        time_limit = st.number_input("⏳ Duration (seconds)", min_value=1, max_value=480, step=1)
        
        if st.button("✅ Submit Request"):
            payload = {"gres": gres, "cpu_per_job": cpu_per_job,"tres_per_job":tres_per_job, "time_limit": time_limit}
            response = requests.post("http://your-api-endpoint/start_session", json=payload)
            if response.status_code == 200:
                st.success("🎉 Session requested successfully!")
            else:
                st.error("❌ Failed to launch session. Please try again.")

    # Display Active Sessions
    jobs = [
        {"name": "Session 1", "status": "Running"},
        {"name": "Session 2", "status": "Queued"},
        {"name": "Session 3", "status": "Completed"}
    ]
    
    for job in jobs:
        st.markdown(f"<div style='padding: 10px; border: 1px solid #ddd; border-radius: 10px; margin-bottom: 10px;'>"
                    f"<strong>{job['name']}</strong><br>Status: {job['status']}</div>",
                    unsafe_allow_html=True)

with col2:
    st.subheader("📂 Jobs")

    # Launch New Project Button
    if st.button("➕ Launch New Job"):
        toggle_project_form()

    if st.session_state.show_project_form:
        project_name = st.text_input("📌 Path")
       
        
        if st.button("✅ Create Project"):
            payload = {"name": path}
            response = requests.post("http://your-api-endpoint/create_project", json=payload)
            if response.status_code == 200:
                st.success(f"🎉 Project '{project_name}' created successfully!")
            else:
                st.error("❌ Failed to create project. Please try again.")

    # Display Projects
    projects = [
        {"name": "Job A", "description": "Data analysis project"},
        {"name": "Job B", "description": "Machine learning pipeline"},
        {"name": "Job C", "description": "Web app development"}
    ]
    
    for project in projects:
        st.markdown(f"<div style='padding: 10px; border: 1px solid #ddd; border-radius: 10px; margin-bottom: 10px;'>"
                    f"<strong>{project['name']}</strong><br>{project['description']}</div>",
                    unsafe_allow_html=True)
